1) @RestController
    -> It is used to convert normal java class to controller class or API class.

2) @RequestMapping
    -> It is used to map the URL to a java method.
    -> It can be used on class level as well as method level
    -> It has several properties like RequestMethod.POST, RequestMethod.GET etc
    -> It is a generic mapping. If not provided the RequestMethod it will support all the HttpMethod by default

3) @GetMapping, @PostMapping, @PutMapping, @DeleteMapping, @PatchMapping etc
    -> These are used to map the URL to a java method
    -> But it can't be used on class level. 
    -> These are the implemenation of parent @RequestMapping

4) @Service / @Component / @Repository
    -> It helps to create a Bean / object of a class on runtime.
    -> @Service -> Used for service Layer
    -> @Component -> Used for configuration / core Layer
    -> @Repository -> Used for Dao layer / Repository / database layer

5) @Autowired
    -> It is used to inject / consume the object on runtime.
    -> It will check the spring container first for the object, else it will ask the particular class.

6) @Data 
    -> It is provided by lombok dependency.
    -> It helps to create getter, setter, toString()

7) @Entity
    -> It is used to convert a normal java class to a entity class / database table
    -> It required @Id as mandatory.

8) @Id
    -> It is a primary key in entity which is used to identify one unique record inside the database table

9) @Table
    -> This is used to provide the tableName in database for particular Java entity class

10) @Column
    -> This is used to provide the columnName in database for particular java field of entity.

11) @Getter
    ->

12) @Setter
    ->

13) @ToString
    ->

14) @NoArgsConstructor
    ->

15) @AllArgsConstructor
    ->

---------------->
Very much important

1. What is dependency injection in spring boot?
2. How spring boot resolves the dependency?



